---
# Copyright (c) 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the Universal Permissive License (UPL), Version 1.0.
# The Universal Permissive License (UPL), Version 1.0 (see COPYING or https://oss.oracle.com/licenses/upl)
# See LICENSE.TXT for details.

- name: Gather facts and create instances
  hosts: localhost
  vars_files:
    - default_vars.yml
  vars:
    oci_config_section: DEFAULT
    ad_placement: 1
    compartment_name:
    compartment_id:
    compute_instances:
      1:
        instance_name: "ocne-operator"
        type: "operator"
      2:
        instance_name: "ocne-control-01"
        type: "controlplane"
      3:
        instance_name: "ocne-worker-01"
        type: "worker"
      4:
        instance_name: "ocne-worker-02"
        type: "worker"
    os: "Oracle Linux"
    os_version: "8"
    instance_shape: "VM.Standard.E4.Flex"
    instance_ocpus: 2
    instance_memory: 32
    private_key: "id_rsa"
    ansible_python_interpreter: "{{ localhost_python_interpreter | default(omit) }}"
    debug_enabled: false

  tasks:

    # - name: Check if state file exists
    #   ansible.builtin.stat:
    #     path: /tmp/ansible.state
    #   register: state_exists

    # - name: Fail if state file already exists
    #   ansible.builtin.fail:
    #     msg: "Exit instance creation as a state file already exists."
    #   when: hosts_exists.stat.exists

    - name: Get location of oci_config
      ansible.builtin.set_fact:
        oci_config_file: "{{ lookup('env', 'HOME') + '/.oci/config' }}"

    - name: Get tenancy ocid
      ansible.builtin.set_fact:
        my_tenancy_id: "{{ lookup('ini', 'tenancy section={{ oci_config_section }} file={{ oci_config_file }}') }}"

    - name: Get region id
      ansible.builtin.set_fact:
        my_region_id: "{{ lookup('ini', 'region section={{ oci_config_section }} file={{ oci_config_file }}') }}"

    - name: Print regions selected
      ansible.builtin.debug:
        msg: "{{ my_region_id }}"
      when: debug_enabled

    - name: Get list availbility domains
      oracle.oci.oci_identity_availability_domain_facts:
        compartment_id: "{{ my_tenancy_id }}"
        region: "{{ my_region_id }}"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print availability domains
      ansible.builtin.debug:
        msg: "{{ result }}"
      when: debug_enabled

    - name: Set list of availability domains
      ansible.builtin.set_fact:
        availability_domains: "{{ result.availability_domains }}"

    - name: Set to availability domain from list
      ansible.builtin.set_fact:
        my_availability_domain: "{{ availability_domains[(lookup('ansible.builtin.vars', 'ad_placement') | int) - 1].name }}"

    - name: Print availability domain ad_placement
      ansible.builtin.debug:
        msg: "{{ my_availability_domain }}"
      when: debug_enabled

    - name: Get compartment id from .oci/config or env OCI_COMPARTMENT_OCID
      vars:
        env_lookup: "{{ lookup('ansible.builtin.env', 'OCI_COMPARMENT_OCID') }}"
        ini_lookup: "{{ lookup('ini', 'compartment-id section={{ oci_config_section }} file={{ oci_config_file }}') }}"
      ansible.builtin.set_fact:
        my_compartment_id: "{{ compartment_id | default(env_lookup, true) | default(ini_lookup, true) }}"

    - name: Print compartment id
      ansible.builtin.debug:
        msg: "{{ my_compartment_id }}"
      when: debug_enabled

    - name: Fail when compartment_id is not defined
      ansible.builtin.fail:
        msg: "Variable for compartment_id is not defined."
      when: my_compartment_id is not defined

    - name: Generate random hex string
      vars:
        hex_chars: '0123456789abcdef'
      ansible.builtin.set_fact:
        vcn_code: "{{ query('community.general.random_string', upper=false, lower=false, override_special=hex_chars, numbers=false) }}"

    - name: Create a virtual cloud network
      oracle.oci.oci_network_vcn:
        compartment_id: "{{ my_compartment_id }}"
        display_name: "Linuxvirt Virtual Cloud Network"
        cidr_blocks: "10.0.0.0/16"
        dns_label: "vcn"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set vcn id
      ansible.builtin.set_fact:
        my_vcn_id: "{{ result.vcn.id }}"

    - name: Create internet_gateway
      oracle.oci.oci_network_internet_gateway:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        is_enabled: true
        display_name: "Linuxvirt Internet Gateway"
        state: 'present'
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set internet gateway id
      ansible.builtin.set_fact:
        my_internet_gateway_id: "{{ result.internet_gateway.id }}"

    - name: Create route_table
      oracle.oci.oci_network_route_table:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        display_name: "Linuxvirt Route Table"
        route_rules:
          - network_entity_id: "{{ my_internet_gateway_id }}"
            cidr_block: "0.0.0.0/0"
            destination_type: CIDR_BLOCK
        state: 'present'
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set route table id
      ansible.builtin.set_fact:
        my_rt_id: "{{ result.route_table.id }}"

    - name: Create ingress rules yaml list
      ansible.builtin.template:
        src: ingress_security_rules.j2
        dest: /tmp/instance_ingress_security_rules.yaml
        mode: "0664"

    - name: Create egress rules yaml list
      ansible.builtin.template:
        src: egress_security_rules.j2
        dest: /tmp/instance_egress_security_rules.yaml
        mode: "0664"

    - name: Load the variables defined in the ingress rules yaml list
      ansible.builtin.include_vars:
        file: /tmp/instance_ingress_security_rules.yaml
        name: loaded_ingress

    - name: Print loaded_ingress
      ansible.builtin.debug:
        msg: "loaded ingress is {{ loaded_ingress }}"
      when: debug_enabled

    - name: Load the variables defined in the egress rules yaml list
      ansible.builtin.include_vars:
        file: /tmp/instance_egress_security_rules.yaml
        name: loaded_egress

    - name: Print loaded_egress
      ansible.builtin.debug:
        msg: "loaded egress is {{ loaded_egress }}"
      when: debug_enabled

    - name: Create security_list
      oracle.oci.oci_network_security_list:
        display_name: "Linuxvirt Security List"
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        ingress_security_rules: "{{ loaded_ingress.instance_ingress_security_rules }}"
        egress_security_rules: "{{ loaded_egress.instance_egress_security_rules }}"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set security list id
      ansible.builtin.set_fact:
        my_security_list_id: "{{ result.security_list.id }}"

    - name: Create subnet
      oracle.oci.oci_network_subnet:
        compartment_id: "{{ my_compartment_id }}"
        vcn_id: "{{ my_vcn_id }}"
        cidr_block: "10.0.0.48/28"
        display_name: "Linuxvirt Subnet"
        prohibit_public_ip_on_vnic: false
        route_table_id: "{{ my_rt_id }}"
        security_list_ids: "{{ my_security_list_id }}"
        dns_label: "lv"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Set subnet id
      ansible.builtin.set_fact:
        my_subnet_id: "{{ result.subnet.id }}"

    - name: Set subnet domain_name
      ansible.builtin.set_fact:
        my_subnet_domain_name: "{{ result.subnet.subnet_domain_name }}"

    - name: Set oci vars file
      ansible.builtin.template:
        src: oci_vars.j2
        dest: oci_vars.yml
        mode: "0664"

    - name: Get image
      oracle.oci.oci_compute_image_facts:
        compartment_id: "{{ my_compartment_id }}"
        operating_system: "{{ os }}"
        operating_system_version: "{{ os_version }}"
        shape: "{{ instance_shape }}"
        sort_by: TIMECREATED
        sort_order: DESC
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print image list
      ansible.builtin.debug:
        var: result
      when: debug_enabled

    - name: Set compute image id
      ansible.builtin.set_fact:
        ol_image_id: "{{ result.images[0].id }}"

    - name: Build an instance
      ansible.builtin.include_tasks: "build.yml"
      loop: "{{ lookup('dict', compute_instances, wantlist=True) }}"

    - name: Set file system storage
      ansible.builtin.include_tasks: "create_fss.yml"
      when: use_fss

    - name: Set load balancer
      ansible.builtin.include_tasks: "create_lb.yml"
      when: use_lb

    - name: Set oci repository
      ansible.builtin.include_tasks: "create_ocir.yml"
      when: use_ocir

- name: Configure new instances
  hosts: all
  become: true
  gather_facts: false
  vars_files:
    - default_vars.yml
    - oci_vars.yml
  vars:
    username: "oracle"
    user_default_password: "oracle"
    private_key: "id_rsa"
    debug_enabled: false

  tasks:

    - name: Print in-memory inventory
      ansible.builtin.debug:
        msg: "{{ groups['all'] }}"
      delegate_to: localhost
      when:
        - debug_enabled
        - inventory_hostname == ansible_play_hosts_all[0]

    - name: Print all variables/facts known for a host
      ansible.builtin.debug:
        msg: "{{ hostvars[item] }}"
      loop: "{{ groups['all'] | flatten(levels=1) }}"
      delegate_to: localhost
      when:
        - debug_enabled
        - inventory_hostname == ansible_play_hosts_all[0]

    - name: Waiting for the port tcp/22 to be open
      ansible.builtin.wait_for:
        host: "{{ hostvars[inventory_hostname].ansible_host }}"
        port: 22
        state: "started"
        timeout: 180

    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:

    - name: Run facts module to get latest information
      ansible.builtin.setup:

    - name: Add user account with access to sudo
      ansible.builtin.user:
        name: "{{ username }}"
        password: "{{ user_default_password | password_hash('sha512') }}"
        comment: Ansible created user
        groups: wheel
        append: true
        update_password: on_create

    - name: Set authorized key for user using local pubilc key file
      ansible.posix.authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/' + private_key + '.pub') }}"

    - name: Set user with passwordless sudo access
      vars:
        sudo_content: "{{ username }} ALL=(ALL:ALL) NOPASSWD: ALL"
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ username }}"
        regexp: "{{ username }} ALL="
        line: "{{ sudo_content }}"
        state: present
        create: true
        mode: "0644"

    - name: Add locale settings to .bashrc
      ansible.builtin.lineinfile:
        dest: ~/.bashrc
        line: "{{ item }}"
      with_items:
        - 'export LC_ALL="en_US.UTF-8"'
        - 'export LC_CTYPE="en_US.UTF-8"'
      become: true
      become_user: "{{ username }}"

    - name: Generate ssh keypair for user
      community.crypto.openssh_keypair:
        path: ~/.ssh/id_rsa
        size: 2048
        comment: ocne ssh keypair
      become: true
      become_user: "{{ username }}"

    - name: Fetch public key file from server
      ansible.builtin.fetch:
        src: "~/.ssh/id_rsa.pub"
        dest: "buffer/{{ inventory_hostname }}-id_rsa.pub"
        flat: true
      become: true
      become_user: "{{ username }}"

    - name: Copy public key to each destination
      ansible.posix.authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', 'buffer/{{ item }}-id_rsa.pub') }}"
      loop: "{{ groups['all'] | flatten(levels=1) }}"

    - name: Print hostvars for groups
      ansible.builtin.debug:
        msg: "{{ hostvars[item] }}"
      loop: "{{ groups['all'] | flatten(levels=1) }}"
      when: debug_enabled

    - name: Print vnc subnet_domain_name
      ansible.builtin.debug:
        var: my_subnet_domain_name
      when: debug_enabled

    - name: Accept new ssh fingerprints
      # Fails as it does not pull in item:
      # vars:
      #   instance_hostname: "{{ hostvars[item].ansible_hostname }}"
      #   instance_ip_address: "{{ hostvars[item].ansible_default_ipv4.address }}"
      #   instance_fqdn: "{{ hostvars[item].ansible_hostname + '.' + my_subnet_domain_name }}"
      #
      # ssh-keyscan -t ecdsa-sha2-nistp256 {{ instance_hostname }},{{ instance_ip_address }},{{ instance_fqdn }} >> ~/.ssh/known_hosts
      ansible.builtin.shell: |
        ssh-keyscan -t ecdsa-sha2-nistp256 \
        {{ hostvars[item].ansible_hostname }},\
        {{ hostvars[item].ansible_default_ipv4.address }},\
        {{ hostvars[item].ansible_hostname + '.' + my_subnet_domain_name }} >> ~/.ssh/known_hosts
      with_items:
        - "{{ groups['all'] }}"
      become: true
      become_user: "{{ username }}"
      register: result
      changed_when: result.rc == 0

    - name: Configure firewall to log denied packets
      ansible.builtin.command:
        cmd: firewall-cmd --set-log-denied=all
      when: debug_enabled
      register: firewall_result
      changed_when: firewall_result.rc == 0

    # Check denied packets with "journalctl -x -e" or with "dmesg | grep -i REJECT"

- name: Install Oracle Cloud Native Environment
  vars:
    install_type: "{{ ocne_type if ocne_type is defined else (lookup('file', 'default_vars.yml') | from_yaml).ocne_type | default('none') }}"
  ansible.builtin.import_playbook: "deploy_ocne_{{ install_type }}.yml"

- name: Print instances
  hosts: all
  become: true
  gather_facts: false
  vars_files:
    - ocir_vars.yml

  tasks:

    - name: Print instance details
      ansible.builtin.debug:
        msg:
          - "Instance details:"
          - "  name: {{ hostvars[inventory_hostname]['ansible_hostname'] }}"
          - "  public ip: {{ hostvars[inventory_hostname]['ansible_host'] }}"
          - "  private ip: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

    - name: Print oci repository details
      ansible.builtin.debug:
        msg:
          - "OCI repository details:"
          - "  name: {{ ocir_name }}"
          - "  namespace: {{ ocir_namespace }}"
      delegate_to: localhost
      when:
        - use_ocir is defined
        - use_ocir
        - inventory_hostname == ansible_play_hosts_all[0]

    - name: Pause play to interact with the servers
      ansible.builtin.pause:
        prompt: |
          Playbook paused... hit <enter> to continue or <ctrl-c> then <a> to abort.
          Aborting at this stage requires manual removal of all cloud resources this playbook creates.

- name: Terminate instances and delete OCI resources
  hosts: localhost
  vars_files:
    - default_vars.yml
  vars:
    ansible_python_interpreter: "{{ localhost_python_interpreter | default(omit) }}"

  tasks:

    - name: Delete file system storage
      ansible.builtin.include_tasks: "delete_fss.yml"
      when: use_fss

    - name: Delete control plane load balancer
      ansible.builtin.include_tasks: "delete_lb.yml"
      when: use_lb

    - name: Delete oci repository
      ansible.builtin.include_tasks: "delete_ocir.yml"
      when: use_ocir

    - name: Terminate the instances
      oracle.oci.oci_compute_instance:
        id: "{{ hostvars[item]['instance_ocid'] }}"
        state: absent
      loop: "{{ groups['all'] | flatten(levels=1) }}"

    - name: Get list oci-ccm load balancers
      oracle.oci.oci_loadbalancer_load_balancer_facts:
        compartment_id: "{{ my_compartment_id }}"
      register: result
      retries: 10
      delay: 30
      until: result is not failed

    - name: Print oci-ccm load balancers
      ansible.builtin.debug:
        var: result
      when: debug_enabled

    - name: Delete oci-ccm load balancers
      when:
        - result.load_balancers is defined
        - result.load_balancers is not string
        - result.load_balancers is not mapping
        - result.load_balancers is iterable
        - result.load_balancers | length > 0
      block:
        - name: Set list of oci-ccm load balancers
          ansible.builtin.set_fact:
            oci_ccm_lb_ids: "{{ oci_ccm_lb_ids | default([]) + [item.id] }}"
          loop: "{{ result.load_balancers }}"

        - name: Print oci-ccm load balancers ids
          ansible.builtin.debug:
            var: oci_ccm_lb_ids
          when: debug_enabled

        - name: Delete oci-ccm load balancer
          oracle.oci.oci_loadbalancer_load_balancer:
            load_balancer_id: "{{ item }}"
            state: 'absent'
          loop: "{{ oci_ccm_lb_ids }}"

    - name: Delete the subnet
      oracle.oci.oci_network_subnet:
        id: "{{ my_subnet_id }}"
        state: absent

    - name: Delete the security list
      oracle.oci.oci_network_security_list:
        id: "{{ my_security_list_id }}"
        state: absent

    - name: Delete the route table
      oracle.oci.oci_network_route_table:
        id: "{{ my_rt_id }}"
        state: absent

    - name: Delete the Internet Gateway
      oracle.oci.oci_network_internet_gateway:
        id: "{{ my_internet_gateway_id }}"
        state: absent

    - name: Delete the VCN
      oracle.oci.oci_network_vcn:
        vcn_id: "{{ my_vcn_id }}"
        state: absent

    - name: Remove artifacts
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - fss_vars.yml
        - lb_vars.yml
        - oci_vars.yml
