---
# Copyright (c) 2024 Oracle and/or its affiliates.
# This software is made available to you under the terms of the Universal Permissive License (UPL), Version 1.0.
# The Universal Permissive License (UPL), Version 1.0 (see COPYING or https://oss.oracle.com/licenses/upl)
# See LICENSE.TXT for details.

- name: Run ocne quick install
  hosts: operator
  become: yes
  vars_files:
    - default_vars.yaml
  vars:
    ocne_registry_location: 'container-registry.oracle.com/olcne'
    operator_node: "{{ groups['operator'] | join(',') }}"
    control_plane_nodes: "{{ groups['controlplane'] | join(',') }}"
    worker_nodes: "{{ groups['worker'] | join(',') }}"
    debug_enabled: false

  tasks:

  - name: Print operator node
    ansible.builtin.debug:
      var: operator_node
    when: debug_enabled

  - name: Print control_plane nodes
    ansible.builtin.debug:
      var: control_plane_nodes
    when: debug_enabled

  - name: Print worker nodes
    ansible.builtin.debug:
      var: worker_nodes
    when: debug_enabled

  - name: Setup olcne ol8 repos
    ansible.builtin.include_tasks: ol8-repo-config.yaml
    when: ansible_distribution == 'OracleLinux' and ansible_distribution_major_version == '8'

  - name: Setup olcne ol9 repos
    ansible.builtin.include_tasks: ol9-repo-config.yaml
    when: ansible_distribution == 'OracleLinux' and ansible_distribution_major_version == '9'

  - name: Install olcne package
    ansible.builtin.dnf:
      name: olcnectl
      state: latest

  - name: Check if OCNE provisioned
    ansible.builtin.stat:
      path: ~/.ocne-provisioned
    become_user: "{{ username }}"
    register: ocne_provision

  - name: Create environment using quick install method
    ansible.builtin.shell: |
      olcnectl provision --api-server "{{ operator_node }}" --control-plane-nodes "{{ control_plane_nodes }}" --worker-nodes "{{ worker_nodes }}" --environment-name myenvironment --name mycluster --yes --selinux enforcing
      touch ~/.ocne-provisioned
    args:
      chdir: ~/
    become_user: "{{ username }}"
    register: provision_kubernetes
    when: 
      - not ocne_provision.stat.exists
      - groups['controlplane'] | length < 2

  - name: Create environment with lb using quick install method
    block:

    - name: Include file_system vars
      ansible.builtin.include_vars:
        file: lb_vars.yaml

    - name: Provision environment
      ansible.builtin.shell: |
        olcnectl provision --api-server "{{ operator_node }}" --control-plane-nodes "{{ control_plane_nodes }}" --worker-nodes "{{ worker_nodes }}" --load-balancer "{{ private_load_balancer_ip_addresses }}" --environment-name myenvironment --name mycluster --yes --selinux enforcing
        touch ~/.ocne-provisioned
      args:
        chdir: ~/
      become_user: "{{ username }}"
      register: provision_kubernetes
    when: 
      - not ocne_provision.stat.exists
      - groups['controlplane'] | length > 1
      - use_lb
    
  - name: Print kubernetes provision output
    ansible.builtin.debug:
      var: provision_kubernetes.stdout_lines
    when: debug_enabled

  - name: Save out ocne config
    ansible.builtin.shell: |
      olcnectl module instances --api-server "{{ operator_node }}":8091 --environment-name myenvironment --update-config
    args:
      chdir: ~/
    become_user: "{{ username }}"
    when: ocne_provision.stat.exists
    
  - name: Provision oci-ccm
    ansible.builtin.include_tasks: "provision-oci-ccm.yaml"
    when: 
      - use_oci_ccm
      - ocne_type != 'none'
  
- name: Setup kubectl on controlplane node
  hosts: controlplane
  become: yes
  vars_files:
    - default_vars.yaml

  tasks:
    
  - name: Create .kube directory
    ansible.builtin.file:
      path: ~/.kube
      state: directory
      mode: '0755'
    become_user: "{{ username }}"

  - name: Copy .kube/config
    ansible.builtin.copy:
      src: /etc/kubernetes/admin.conf
      dest: '/home/{{ username }}/.kube/config'
      owner: "{{ username }}"
      group: "{{ username }}"
      remote_src: yes

  - name: Add .kube/config to .bashrc file
    ansible.builtin.lineinfile:
      path: ~/.bashrc
      line: 'export KUBECONFIG=$HOME/.kube/config'
    become_user: "{{ username }}"

  - name: Create fss deployment descriptors
    block:

      - name: Include file_system vars
        ansible.builtin.include_vars:
          file: fss_vars.yaml

      - name: Create file fss-pv.yaml
        ansible.builtin.template:
          src: fss-pv.j2
          dest: ~/fss-pv.yaml
        become_user: "{{ username }}"

      - name: Create file fss-pvc.yaml
        ansible.builtin.template:
          src: fss-pvc.j2
          dest: ~/fss-pvc.yaml
        become_user: "{{ username }}"

      - name: Create file fss-pod.yaml
        ansible.builtin.template:
          src: fss-pod.j2
          dest: ~/fss-pod.yaml
        become_user: "{{ username }}"
    when: use_fss